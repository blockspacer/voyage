- OPEN-SOURCE GENERIC ENGINE FOR ONLINE ROGUE-LIKE STORYTELLING?

* NETWORK layer on top of RakNet. Get inspiration from Biribit. Keep it simple.

** Player
** Session
** Room
** Server
** EventHandler: different handlers for different types of events (inherit templated class?)
** EventDispatcher
** Event
** EventFactory (wrapper protocol buffers)

   
* SERVER

** Database

** World
   - initialization
   - container of things
   - handles login of new sessions onLogin(PlayerSession)
     
** PlayerSession:
   - etityId
   - player
   - eventDispatcher
   - dbConnectionPool
   - scriptEngine
   - other stuff!
   - gets messages to broadcast back to the player
    
** ScriptContext:
   - interface that the script needs to do whatever:
       + database thread pool
       + player session

** Scene: 
   - puts players together (player sessions to broadcast) (Room specialization?)

 
* CLIENT

Client should only send text (in principle)
V1: screen split -> 2D SDL tilemap + text terminal

----------------------------------------------------------------------------------

- How would a server loop work like?
  1. Wait for client messages
  2. Decode messages into semantic chunks 
  3. Initialize script context with whatever data 
  4. Run corresponding script   
  5. Run world scripts (AI, weather system, etc...)

- How to handle tasks that are not instantaneous (walk to point)?
  1. Have the script run all the time? overkill? maybe not!
     we can define a init method and a run method

  2. Have a set of common tasks implemented within task pools in C++: things like walk etc...
  








* CONSISTENCY CLIENT-SERVER

** Instances have an "update" timestamp in the dataset 
** Whenever an object is changed the timestamp is updated
** The client can send a region request with the timestamp of the last time it download it
** If things get deleted, how to update the client? Easy. we mark the tile as "dirty"
** So the server sends any dirty tiles as well as entities with a newer timestamp
** We'll have to provide python with convenient wrappers of the entity manipulation
** The client should only request a new region when it seps on it
** The data that changes dynamically in the region is "pushed" by the server
***  with a broadcast message to all present players in the region (usually actions like moving)

* CLIENT DATA

** Client downloads the relevant data at the very beginning:
*** List of entities, actions attributes, etc...
** The region instances are downloaded on demand
** We need different handlers in the client for different types of messages
*** The region update message would take the data, update the dataset, and update the GUI

* SERVER DATA:

** SqlLite dataset
** World Tilemap divided in square regions 
** The attribute position would specify the tile where is in. 
** Depending on how expensive is to keep the dataset updated 
*** with the position for instance that changes a lot we can leave it as a special attribute
*** in a cache-friendly array so that all entity positions are simultaneously updated 



* LOTS OF MESSAGES NOW! YEAH
- TODO: 
** TODO Implement the tilemap in the server
** TODO Implement the: query for region, reply with region protocol
** TODO visualize region with contents from dataset
** DONE Nicely wrap the protocol buffers
   CLOSED: [2016-03-04 Fri 10:11]

** TODO Design a Client database cacher
** DONE Organize a bit better the whole concept of messages/handlers
   CLOSED: [2016-03-04 Fri 10:11]
** TODO Implement the tilemap visualization
** TODO Interface with python semantic analysis in the client (temporal?)
** Doxygen doc generation
** TODO Design all messages:
*** Login protocol 
*** Data download on login
*** Request/Response of new mapRegion (or updated)
*** Send user input: should be the same format if it comes from written text or screen
** Establish a minimal playable scenario
*** A single static region that fits the screen. 
*** Main character
*** Some trees and objects
*** User input with some graphical features like dynamic display of action possibilities
*** Map loading from server as well as some action messages (i.e pick up axe)



* WHY TO USE TEXT IF WE CAN CLICK ON THE SCENE?

The screen should only make easier the input of instructions: For instance, if we click on a tree,
the console can fill the word tree and wait for us to introduce the rest of the sentence.

It should help also to fill instructions with location components:
If the user types "Walk to" and then clicks on a tile, the player will go there. 
If it writes: "Kick" and then clicks on a character it will kick it. 
It would be interesting if the interface shows stuff that can be "kicked" also.
E.g: Use axe with , and then trees are selected. 

There should be short-cuts for the most common tasks: w: walk 
The last short-cut stays selected for repeated moves

If we left-click on an tile: a name/description is shown.
If we right-click on an tile: fills the console and waits for input




* ISSUES: 
** Plenty of objects with plenty of attribute scripts to be run bad performance
** We should categorize certain actions as synchronous or async. so that they run in C++
** with an efficient cache-friendly task pool
** 
